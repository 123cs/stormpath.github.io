.. _i18n:

Internationalization (i18n)
===========================

All of the |project| default views are fully internationalized using standard Spring ``MessageSource`` internationalization support.  Spring Boot makes this even easier by supporting a default ``MessageSource`` as a ``messages`` resource bundle at the root of the classpath.  For example, assuming a Maven/Gradle project layout::

    src/
    |-- main/
        |-- resources/
            |-- messages.properties
            |-- messages_es.properties
            |-- messages_de.properties
            |-- ... etc ...



Languages
---------

Even if you don't define any message keys yourself, the |project| comes with one default :ref:`English bundle file <i18n-properties-file>`.

You can add other languages as follows:

1.  Create one or more ``messages_LOCALE.properties`` files to the root package (as shown above), for example ``messages_es.properties`` for Spanish (or even ``messages_es_ES.properties`` for Spain's dialect of Spanish and ``messages_es_MX.properties`` for Mexican dialect of Spanish, etc).
2.  In each locale-specific file, re-define each Stormpath :ref:`i18n property <i18n-properties-file>` value in that language.

.. Note::
    If you create new translations, we'd love it if you would contribute them to the project as a `pull request`_. The Stormpath community would be grateful!

Request Locale
--------------

The locale used to render messages during a request is determined by a Spring ``LocaleResolver`` instance.  If you do not configure one yourself, the |project| defaults to using a Spring ``CookieLocaleResolver``, but you could specify your own as a bean override:

.. code-block:: java

    @Bean
    public LocaleResolver localeResolver() {
        return new CookieLocaleResolver();
    }

Also locale switching is determined by a Spring ``LocaleChangeInterceptor`` instance. The |project| defaults to a standard ``LocaleChangeInterceptor`` instance that looks for request parameter named ``lang`` (e.g. ``http://localhost:8080/foo?lang=es``).  You could specify your own as a bean override:

.. code-block:: java

    @Bean
    public LocaleChangeInterceptor localeChangeInterceptor() {
        LocaleChangeInterceptor lci = new LocaleChangeInterceptor();
        lci.setParamName("lang");
        return lci;
    }

View Templates
--------------

You can reference any of the stormpath i18n properties below in a view template using standard template message support.

For example, Thymeleaf templates use a ``#{ }`` notation, such as ``#{stormpath.web.login.title}``.  JSPs can just use Spring's standard tag library, e.g. ``<spring:message code='stormpath.web.login.title'/>``

.. _i18n-properties-file:

i18n.properties
---------------

.. literalinclude:: ../../../../extensions/servlet/src/main/resources/com/stormpath/sdk/servlet/i18n.properties
   :language: properties

.. _pull request: https://github.com/stormpath/stormpath-sdk-java/pulls
.. _ServletRequest.getLocale(): http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getLocale()
